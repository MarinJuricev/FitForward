CREATE TABLE IF NOT EXISTS  routine_template (
  routine_id TEXT NOT NULL,
  exercise_id TEXT NOT NULL,
  position INTEGER NOT NULL,
  sets INTEGER,
  reps INTEGER,

  PRIMARY KEY (routine_id, exercise_id),

  FOREIGN KEY (routine_id) REFERENCES routine(id) ON DELETE CASCADE,
  FOREIGN KEY (exercise_id) REFERENCES exercise(id) ON DELETE CASCADE
);

upsertRoutineExercise:
INSERT INTO routine_template (
  routine_id,
  exercise_id,
  position,
  sets,
  reps
)
VALUES (
  :routineId,
  :exerciseId,
  :position,
  :sets,
  :reps
)
ON CONFLICT(routine_id, exercise_id) DO UPDATE SET
  position = excluded.position,
  sets = excluded.sets,
  reps = excluded.reps;

selectAllRoutineExercises:
SELECT
   routine_template.routine_id AS routineId,
   routine_template.exercise_id AS exerciseId,
   routine_template.position AS position,
   routine_template.sets AS sets,
   routine_template.reps AS reps
FROM  routine_template;

selectExercisesForRoutine:
SELECT
  exercise.id AS exerciseId,
  exercise.name AS exerciseName
FROM exercise
JOIN routine_template 
  ON exercise.id =  routine_template.exercise_id
WHERE  routine_template.routine_id = :routineId;

selectRoutinesForExercise:
SELECT
  routine.id AS routineId,
  routine.name AS routineName,
  routine.created_at AS createdAt
FROM routine
JOIN routine_template 
  ON routine.id =  routine_template.routine_id
WHERE  routine_template.exercise_id = :exerciseId;

deleteRoutineExercise:
DELETE FROM routine_template 
WHERE routine_id = :routineId
  AND exercise_id = :exerciseId;

deleteRoutineExercisesForRoutine:
DELETE FROM routine_template 
WHERE routine_id = :routineId;