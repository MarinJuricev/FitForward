import kotlin.Int;

CREATE TABLE IF NOT EXISTS workout_exercise (
  history_id TEXT NOT NULL,
  exercise_id TEXT NOT NULL,
  sets INTEGER AS Int,
  reps INTEGER AS Int,

  PRIMARY KEY (history_id, exercise_id),

  FOREIGN KEY (history_id) REFERENCES workout_history(id) ON DELETE CASCADE,
  FOREIGN KEY (exercise_id) REFERENCES exercise(id) ON DELETE CASCADE
);

upsertRoutineHistoryExercise:
INSERT INTO workout_exercise (
  history_id,
  exercise_id,
  sets,
  reps
)
VALUES (
  :historyId,
  :exerciseId,
  :sets,
  :reps
)
ON CONFLICT(history_id, exercise_id) DO UPDATE SET
  sets = excluded.sets,
  reps = excluded.reps;

selectExercisesForHistory:
SELECT
  exercise.id AS exerciseId,
  exercise.name AS exerciseName,
  workout_exercise.sets AS sets,
  workout_exercise.reps AS reps
FROM exercise
JOIN workout_exercise
  ON exercise.id = workout_exercise.exercise_id
WHERE workout_exercise.history_id = :historyId;

deleteWorkoutExercisesForHistoryByDate:
DELETE FROM workout_exercise
WHERE history_id IN (
  SELECT id
  FROM workout_history
  WHERE performed_at = :performedAt
);
